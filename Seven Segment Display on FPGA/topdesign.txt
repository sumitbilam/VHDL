library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity TopDesign is
    Port ( Switch0 : in  STD_LOGIC;
           Switch1 : in  STD_LOGIC;
           Switch2 : in  STD_LOGIC;
           Switch3 : in  STD_LOGIC;
           Switch4 : in  STD_LOGIC;
           Switch5 : in  STD_LOGIC;
           Switch6 : in  STD_LOGIC;
           Switch7 : in  STD_LOGIC;
           clk : in  STD_LOGIC;
           topselDispA : out  STD_LOGIC;
           topselDispB : out  STD_LOGIC;
           topselDispC : out  STD_LOGIC;
           topselDispD : out  STD_LOGIC;
           topsegA : out  STD_LOGIC;
           topsegB : out  STD_LOGIC;
           topsegC : out  STD_LOGIC;
           topsegD : out  STD_LOGIC;
           topsegE : out  STD_LOGIC;
           topsegF : out  STD_LOGIC;
           topsegG : out  STD_LOGIC);
end TopDesign;

architecture Behavioral of TopDesign is
	component segmentdriver is
		 Port ( display_A : in  STD_LOGIC_VECTOR (3 downto 0);
           display_B : in  STD_LOGIC_VECTOR (3 downto 0);
           display_C : in  STD_LOGIC_VECTOR (3 downto 0);
           display_D : in  STD_LOGIC_VECTOR (3 downto 0);
           segA : out  STD_LOGIC;
           segB : out  STD_LOGIC;
           segC : out  STD_LOGIC;
           segD : out  STD_LOGIC;
           segE : out  STD_LOGIC;
           segF : out  STD_LOGIC;
           segG : out  STD_LOGIC;
           select_Display_A : out  STD_LOGIC;
           select_Display_B : out  STD_LOGIC;
           select_Display_C : out  STD_LOGIC;
           select_Display_D : out  STD_LOGIC;
           clk : in  STD_LOGIC);
	end component;
	
	signal Ai: std_logic_vector(3 downto 0);
	signal Bi: std_logic_vector(3 downto 0);
	signal Ci: std_logic_vector(3 downto 0);
	signal Di: std_logic_vector(3 downto 0);
	
begin
   uut2: segmentdriver
		port map (
			display_A => Ai,
			display_B => Bi,
			display_C => Ci,
			display_D => Di,
			segA => topsegA,
			segB => topsegB,
			segC => topsegC,
			segD => topsegD,
			segE => topsegE,
			segF => topsegF,
			segG => topsegG,
	      select_Display_A => topselDispA,
			select_Display_B => topselDispB,
         select_Display_C => topselDispC,
			select_Display_D => topselDispD,
			clk => clk
		);
      Ai(0) <= Switch0;
		Ai(1) <= Switch1;
		Ai(2) <= Switch2;
		Ai(3) <= Switch3;
		Bi(0) <= Switch4;
		Bi(1) <= Switch5;
		Bi(2) <= Switch6;
		Bi(3) <= Switch7;
		
		Ci <= "1111"; --hardcoding the rest of signal, we can use Ci and Di if we have more switches
		Di <= "1111";
end Behavioral;

