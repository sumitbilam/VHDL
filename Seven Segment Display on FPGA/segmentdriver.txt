library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity segmentdriver is
    Port ( display_A : in  STD_LOGIC_VECTOR (3 downto 0);
           display_B : in  STD_LOGIC_VECTOR (3 downto 0);
           display_C : in  STD_LOGIC_VECTOR (3 downto 0);
           display_D : in  STD_LOGIC_VECTOR (3 downto 0);
           segA : out  STD_LOGIC;
           segB : out  STD_LOGIC;
           segC : out  STD_LOGIC;
           segD : out  STD_LOGIC;
           segE : out  STD_LOGIC;
           segF : out  STD_LOGIC;
           segG : out  STD_LOGIC;
           select_Display_A : out  STD_LOGIC;
           select_Display_B : out  STD_LOGIC;
           select_Display_C : out  STD_LOGIC;
           select_Display_D : out  STD_LOGIC;
           clk : in  STD_LOGIC);
end segmentdriver;

architecture Behavioral of segmentdriver is
	component segmentdecode is
		Port ( Digit : in  STD_LOGIC_VECTOR (3 downto 0);
           segment_A : out  STD_LOGIC;
           segment_B : out  STD_LOGIC;
           segment_C : out  STD_LOGIC;
           segment_D : out  STD_LOGIC;
           segment_E : out  STD_LOGIC;
           segment_F : out  STD_LOGIC;
           segment_G : out  STD_LOGIC);
	end component;
	
	component clock_divider is 
		Port ( clk : in  STD_LOGIC;
           enable : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           data_clk : out  STD_LOGIC_VECTOR (15 downto 0));
	end component;
	
	signal temporary_data : std_logic_vector(3 downto 0);
	signal clock_word : std_logic_vector(15 downto 0);
	signal slow_clock : std_logic;
begin

	uut: segmentdecode
		port map (
			Digit => temporary_data,
			segment_A => segA,
			segment_B => segB,
			segment_C => segC,
			segment_D => segD,
			segment_E => segE,
			segment_F => segF,
			segment_G => segG
		);
	uut1: clock_divider
		port map (
			clk => clk,
			enable=> '1',
			reset => '0',
			data_clk => clock_word
		);
	--purpose of this module is to slow down the clock therefore we will assign
	-- 16th bit of clock_word to slow clock so we can use slow clock in out process
	-- therefore our process will execute after every time when clock-word reach 16th bit
	slow_clock <= clock_word(15);
	
	process(slow_clock)
		variable display_selection : std_logic_vector(1 downto 0); --selection for mux
		begin
		if slow_clock'event  and slow_clock = '1' then
			case display_selection is
				when "00" => temporary_data <= display_A;
					select_display_A <= '0'; --select-display pins are active low here
					select_display_B <= '1'; --which means if you set "0" they will be ON
					select_display_C <= '1'; --and if you set "1" they will be OFF
					select_display_D <= '1';
					
				display_selection := display_selection+ '1';
				
				when "01" => temporary_data <= display_B;
					select_display_A <= '1'; --select-display pins are active low here
					select_display_B <= '0'; --which means if you set "0" they will be ON
					select_display_C <= '1'; --and if you set "1" they will be OFF
					select_display_D <= '1';
					
				display_selection := display_selection+ '1';
				
				when "10" => temporary_data <= display_C;
					select_display_A <= '1'; --select-display pins are active low here
					select_display_B <= '1'; --which means if you set "0" they will be ON
					select_display_C <= '0'; --and if you set "1" they will be OFF
					select_display_D <= '1';
					
				display_selection := display_selection+ '1';
				
				when others => temporary_data <= display_D;
					select_display_A <= '1'; --select-display pins are active low here
					select_display_B <= '1'; --which means if you set "0" they will be ON
					select_display_C <= '1'; --and if you set "1" they will be OFF
					select_display_D <= '0';
					
				display_selection := display_selection+ '1';
			end case;
		end if;
	end process;
end Behavioral;

