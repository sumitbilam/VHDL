library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity clock_divider is
    Port ( clk : in  STD_LOGIC;
           enable : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           data_clk : out  STD_LOGIC_VECTOR (15 downto 0));
end clock_divider;

architecture Behavioral of clock_divider is

begin
	process(clk, reset)
		variable count: std_logic_vector (15 downto 0) := (others =>'0'); --a counter which will increment after every clock cycle
		begin
	
		if reset = '1' then
			count := (others => '0'); --count is like an array this line says if reset is 1 make all element in your array = 0
		elsif enable = '1' and clk'event and clk = '1' then
			count := count + 1; -- include use ieee.std_logic_arith.all;
		end if;
		data_clk <= count;
	
	end process;
end Behavioral;

